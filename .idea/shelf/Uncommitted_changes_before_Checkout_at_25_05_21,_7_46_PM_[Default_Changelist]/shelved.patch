Index: library/src/main/java/com/gowtham/library/utils/TrimVideo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gowtham.library.utils;\n\n\nimport android.app.Activity;\nimport android.content.Intent;\n\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\nimport com.gowtham.library.ui.ActVideoTrimmer;\n\npublic class TrimVideo {\n\n    public static int VIDEO_TRIMMER_REQ_CODE = 324;\n\n    public static final String TRIM_VIDEO_OPTION = \"trim_video_option\",\n            TRIM_VIDEO_URI = \"trim_video_uri\",TRIMMED_VIDEO_PATH=\"trimmed_video_path\";\n\n    public static ActivityBuilder activity(String uri) {\n        return new ActivityBuilder(uri);\n    }\n\n    public static String getTrimmedVideoPath(Intent intent){\n        return intent.getStringExtra(TRIMMED_VIDEO_PATH);\n    }\n\n    public static final class ActivityBuilder {\n\n        @Nullable\n        private final String videoUri;\n\n        private TrimVideoOptions options;\n\n        public ActivityBuilder(@Nullable String videoUri) {\n            this.videoUri = videoUri;\n            options = new TrimVideoOptions();\n            options.trimType=TrimType.DEFAULT;\n        }\n\n        public ActivityBuilder setTrimType(final TrimType trimType) {\n            options.trimType = trimType;\n            return this;\n        }\n\n        public ActivityBuilder setHideSeekBar(final boolean hide) {\n            options.hideSeekBar = hide;\n            return this;\n        }\n\n        public ActivityBuilder setCompressOption(final CompressOption compressOption) {\n            options.compressOption = compressOption;\n            return this;\n        }\n\n        public ActivityBuilder setFileName(final String fileName) {\n            options.fileName = fileName;\n            return this;\n        }\n\n        public ActivityBuilder showFileLocationAlert() {\n            options.showFileLocationAlert = true;\n            return this;\n        }\n\n        public ActivityBuilder setAccurateCut(final boolean accurate) {\n            options.accurateCut = accurate;\n            return this;\n        }\n\n        public ActivityBuilder setMinDuration(final long minDuration) {\n            options.minDuration = minDuration;\n            return this;\n        }\n\n        public ActivityBuilder setFixedDuration(final long fixedDuration) {\n            options.fixedDuration = fixedDuration;\n            return this;\n        }\n\n        public ActivityBuilder setMinToMax(long min, long max) {\n            options.minToMax = new long[]{min, max};\n            return this;\n        }\n\n        public void start(Activity activity) {\n            validate();\n            activity.startActivityForResult(getIntent(activity), VIDEO_TRIMMER_REQ_CODE);\n        }\n        \n        public void start(Fragment fragment) {\n            validate();\n            fragment.startActivityForResult(getIntent(fragment.getActivity()), VIDEO_TRIMMER_REQ_CODE);\n        }\n\n        private void validate() {\n            if (videoUri == null)\n                throw new NullPointerException(\"VideoUri cannot be null.\");\n            if (videoUri.isEmpty())\n                throw new IllegalArgumentException(\"VideoUri cannot be empty\");\n            if (options.trimType == null)\n                throw new NullPointerException(\"TrimType cannot be null\");\n            if (options.minDuration < 0)\n                throw new IllegalArgumentException(\"Cannot set min duration to a number < 1\");\n            if (options.fixedDuration < 0)\n                throw new IllegalArgumentException(\"Cannot set fixed duration to a number < 1\");\n            if (options.trimType==TrimType.MIN_MAX_DURATION && options.minToMax==null)\n                throw new IllegalArgumentException(\"Used trim type is TrimType.MIN_MAX_DURATION.\" +\n                        \"Give the min and max duration\");\n            if (options.minToMax != null){\n                if ((options.minToMax[0] < 0 || options.minToMax[1] < 0))\n                    throw new IllegalArgumentException(\"Cannot set min to max duration to a number < 1\");\n                if ((options.minToMax[0] > options.minToMax[1]))\n                    throw new IllegalArgumentException(\"Minimum duration cannot be larger than max duration\");\n                if ((options.minToMax[0] == options.minToMax[1]))\n                    throw new IllegalArgumentException(\"Minimum duration cannot be same as max duration.Use Fixed duration\");\n            }\n        }\n\n        private Intent getIntent(Activity activity) {\n            Intent intent = new Intent(activity, ActVideoTrimmer.class);\n            intent.putExtra(TRIM_VIDEO_URI, videoUri);\n            intent.putExtra(TRIM_VIDEO_OPTION, options);\n            return intent;\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- library/src/main/java/com/gowtham/library/utils/TrimVideo.java	(revision 33dcb520c33c5512efeec40f2cc9423dd6a3169d)
+++ library/src/main/java/com/gowtham/library/utils/TrimVideo.java	(date 1621952055266)
@@ -29,7 +29,7 @@
         @Nullable
         private final String videoUri;
 
-        private TrimVideoOptions options;
+        private final TrimVideoOptions options;
 
         public ActivityBuilder(@Nullable String videoUri) {
             this.videoUri = videoUri;
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"RunConfigurationProducerService\">\n    <option name=\"ignoredProducers\">\n      <set>\n        <option value=\"org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer\" />\n        <option value=\"org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer\" />\n        <option value=\"org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer\" />\n      </set>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/runConfigurations.xml	(revision 33dcb520c33c5512efeec40f2cc9423dd6a3169d)
+++ .idea/runConfigurations.xml	(date 1621075306132)
@@ -3,6 +3,7 @@
   <component name="RunConfigurationProducerService">
     <option name="ignoredProducers">
       <set>
+        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
         <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
         <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
         <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <bytecodeTargetLevel target=\"1.8\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision 33dcb520c33c5512efeec40f2cc9423dd6a3169d)
+++ .idea/compiler.xml	(date 1621075455784)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="1.8" />
+    <bytecodeTargetLevel target="11" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/gowtham/videotrimmer/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gowtham.videotrimmer;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.MediaController;\nimport android.widget.Toast;\nimport android.widget.VideoView;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\n\nimport com.cocosw.bottomsheet.BottomSheet;\nimport com.gowtham.library.utils.CompressOption;\nimport com.gowtham.library.utils.LogMessage;\nimport com.gowtham.library.utils.TrimType;\nimport com.gowtham.library.utils.TrimVideo;\nimport com.gowtham.library.utils.TrimmerUtils;\n\nimport java.io.File;\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private static final int REQUEST_TAKE_VIDEO = 552;\n\n    private VideoView videoView;\n\n    private MediaController mediaController;\n\n    private EditText edtFixedGap, edtMinGap, edtMinFrom, edtMAxTo;\n\n    private int trimType;\n\n    private static final String TAG = \"MainActivity\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        videoView = findViewById(R.id.video_view);\n        edtFixedGap = findViewById(R.id.edt_fixed_gap);\n        edtMinGap = findViewById(R.id.edt_min_gap);\n        edtMinFrom = findViewById(R.id.edt_min_from);\n        edtMAxTo = findViewById(R.id.edt_max_to);\n        mediaController = new MediaController(this);\n\n\n\n        findViewById(R.id.btn_default_trim).setOnClickListener(this);\n        findViewById(R.id.btn_fixed_gap).setOnClickListener(this);\n        findViewById(R.id.btn_min_gap).setOnClickListener(this);\n        findViewById(R.id.btn_min_max_gap).setOnClickListener(this);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        try {\n            if (requestCode == TrimVideo.VIDEO_TRIMMER_REQ_CODE && data != null) {\n                Uri uri = Uri.parse(TrimVideo.getTrimmedVideoPath(data));\n                Log.d(TAG, \"Trimmed path:: \" + uri);\n                videoView.setMediaController(mediaController);\n                videoView.setVideoURI(uri);\n                videoView.requestFocus();\n                videoView.start();\n\n                videoView.setOnPreparedListener(mediaPlayer -> {\n                    mediaController.setAnchorView(videoView);\n                });\n\n                String filepath = String.valueOf(uri);\n                File file = new File(filepath);\n                long length = file.length();\n                Log.d(TAG, \"Video size:: \" + (length / 1024));\n            } else if (requestCode == REQUEST_TAKE_VIDEO && resultCode == RESULT_OK) {\n            /*    //check video duration if needed\n                if (TrimmerUtils.getVideoDuration(this,data.getData())<=30){\n                    Toast.makeText(this,\"Video should be larger than 30 sec\",Toast.LENGTH_SHORT).show();\n                    return;\n                }*/\n                if (data.getData() != null) {\n                    LogMessage.v(\"Video path:: \" + data.getData());\n                    openTrimActivity(String.valueOf(data.getData()));\n                } else {\n                    Toast.makeText(this, \"video uri is null\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void openTrimActivity(String data) {\n        if (trimType == 0) {\n            TrimVideo.activity(data)\n                    .setCompressOption(new CompressOption()) //pass empty constructor for default compress option\n                    .start(this);\n        } else if (trimType == 1) {\n            TrimVideo.activity(data)\n                    .setTrimType(TrimType.FIXED_DURATION)\n                    .setFixedDuration(getEdtValueLong(edtFixedGap))\n                    .start(this);\n        } else if (trimType == 2) {\n            TrimVideo.activity(data)\n                    .setTrimType(TrimType.MIN_DURATION)\n                    .setMinDuration(getEdtValueLong(edtMinGap))\n                    .start(this);\n        } else {\n            TrimVideo.activity(data)\n                    .setTrimType(TrimType.MIN_MAX_DURATION)\n                    .setMinToMax(getEdtValueLong(edtMinFrom), getEdtValueLong(edtMAxTo))\n                    .start(this);\n        }\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.btn_default_trim:\n                onDefaultTrimClicked();\n                break;\n            case R.id.btn_fixed_gap:\n                onFixedTrimClicked();\n                break;\n            case R.id.btn_min_gap:\n                onMinGapTrimClicked();\n                break;\n            case R.id.btn_min_max_gap:\n                onMinToMaxTrimClicked();\n                break;\n        }\n    }\n\n    private void onDefaultTrimClicked() {\n        trimType = 0;\n        if (checkCamStoragePer())\n            showVideoOptions();\n    }\n\n    private void onFixedTrimClicked() {\n        trimType = 1;\n        if (isEdtTxtEmpty(edtFixedGap))\n            Toast.makeText(this, \"Enter fixed gap duration\", Toast.LENGTH_SHORT).show();\n        else if (checkCamStoragePer())\n            showVideoOptions();\n    }\n\n    private void onMinGapTrimClicked() {\n        trimType = 2;\n        if (isEdtTxtEmpty(edtMinGap))\n            Toast.makeText(this, \"Enter min gap duration\", Toast.LENGTH_SHORT).show();\n        else if (checkCamStoragePer())\n            showVideoOptions();\n    }\n\n\n    private void onMinToMaxTrimClicked() {\n        trimType = 3;\n        if (isEdtTxtEmpty(edtMinFrom))\n            Toast.makeText(this, \"Enter min gap duration\", Toast.LENGTH_SHORT).show();\n        else if (isEdtTxtEmpty(edtMAxTo))\n            Toast.makeText(this, \"Enter max gap duration\", Toast.LENGTH_SHORT).show();\n        else if (checkCamStoragePer())\n            showVideoOptions();\n    }\n\n    public void showVideoOptions() {\n        try {\n            BottomSheet.Builder builder = getBottomSheet();\n            builder.sheet(R.menu.menu_video);\n            builder.listener(item -> {\n                if (R.id.action_take == item.getItemId())\n                    captureVideo();\n                else\n                    openVideo();\n                return false;\n            });\n            builder.show();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public BottomSheet.Builder getBottomSheet() {\n        return new BottomSheet.Builder(this).title(R.string.txt_option);\n    }\n\n    public void captureVideo() {\n        try {\n            Intent intent = new Intent(\"android.media.action.VIDEO_CAPTURE\");\n            intent.putExtra(\"android.intent.extra.durationLimit\", 30);\n            startActivityForResult(intent, REQUEST_TAKE_VIDEO);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void openVideo() {\n        try {\n            Intent intent = new Intent();\n            intent.setType(\"video/*\");\n            intent.setAction(Intent.ACTION_GET_CONTENT);\n            startActivityForResult(Intent.createChooser(intent, \"Select Video\"), REQUEST_TAKE_VIDEO);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (isPermissionOk(grantResults))\n            showVideoOptions();\n    }\n\n    private boolean isEdtTxtEmpty(EditText editText) {\n        return editText.getText().toString().trim().isEmpty();\n    }\n\n    private long getEdtValueLong(EditText editText) {\n        return Long.parseLong(editText.getText().toString().trim());\n    }\n\n    private boolean checkCamStoragePer() {\n        return checkPermission(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CAMERA);\n    }\n\n    private boolean checkPermission(String... permissions) {\n        boolean allPermitted = false;\n        for (String permission : permissions) {\n            allPermitted = (ContextCompat.checkSelfPermission(this, permission)\n                    == PackageManager.PERMISSION_GRANTED);\n            if (!allPermitted)\n                break;\n        }\n        if (allPermitted)\n            return true;\n        ActivityCompat.requestPermissions(this, permissions,\n                220);\n        return false;\n    }\n\n    private boolean isPermissionOk(int... results) {\n        boolean isAllGranted = true;\n        for (int result : results) {\n            if (PackageManager.PERMISSION_GRANTED != result) {\n                isAllGranted = false;\n                break;\n            }\n        }\n        return isAllGranted;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/gowtham/videotrimmer/MainActivity.java	(revision 33dcb520c33c5512efeec40f2cc9423dd6a3169d)
+++ app/src/main/java/com/gowtham/videotrimmer/MainActivity.java	(date 1621077552311)
@@ -54,7 +54,6 @@
         mediaController = new MediaController(this);
 
 
-
         findViewById(R.id.btn_default_trim).setOnClickListener(this);
         findViewById(R.id.btn_fixed_gap).setOnClickListener(this);
         findViewById(R.id.btn_min_gap).setOnClickListener(this);
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    ext.kotlin_version = '1.4.0'\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.1.3'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 33dcb520c33c5512efeec40f2cc9423dd6a3169d)
+++ build.gradle	(date 1621076262357)
@@ -3,6 +3,7 @@
     ext.kotlin_version = '1.4.0'
     repositories {
         google()
+        mavenCentral()
         jcenter()
     }
     dependencies {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"MavenBuildProjectComponent\">\n    <option name=\"mavenExecutable\" value=\"\" />\n    <option name=\"Settings File\" value=\"\" />\n    <option name=\"mavenCommandLineParams\" value=\"\" />\n    <option name=\"vmOptions\" value=\"\" />\n    <option name=\"useMavenEmbedder\" value=\"false\" />\n    <option name=\"useFilter\" value=\"false\" />\n    <option name=\"Batch Mode\" value=\"false\" />\n    <option name=\"Check Plugin Updates\" value=\"false\" />\n    <option name=\"Debug\" value=\"false\" />\n    <option name=\"Errors\" value=\"false\" />\n    <option name=\"Fail At End\" value=\"false\" />\n    <option name=\"Fail Fast\" value=\"false\" />\n    <option name=\"Fail Never\" value=\"false\" />\n    <option name=\"Lax Checksums\" value=\"false\" />\n    <option name=\"No Plugin Registry\" value=\"false\" />\n    <option name=\"No Plugin Updates\" value=\"false\" />\n    <option name=\"Non Recursive\" value=\"false\" />\n    <option name=\"Offline\" value=\"false\" />\n    <option name=\"Reactor\" value=\"false\" />\n    <option name=\"Strict Checksums\" value=\"false\" />\n    <option name=\"Update Plugins\" value=\"false\" />\n    <option name=\"Update Snapshots\" value=\"false\" />\n    <option name=\"Skip Tests\" value=\"false\" />\n    <pom-list />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 33dcb520c33c5512efeec40f2cc9423dd6a3169d)
+++ .idea/misc.xml	(date 1621075455735)
@@ -26,7 +26,7 @@
     <option name="Skip Tests" value="false" />
     <pom-list />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
